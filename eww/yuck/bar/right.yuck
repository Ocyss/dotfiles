(defpoll clock_time :interval "1s" "date +%H:%M:%S")
(defpoll clock_date :interval "10h" "date '+%Y/%m/%d %A'")

(defpoll volume_percent :interval "1m" :initial "100" "pamixer --get-volume-human | sed 's/%//'")

(deflisten wifi_connected "scripts/wifi -m")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

(defpoll gpu_busy :interval "1s" :initial "0" "cat /sys/class/drm/card1/device/gpu_busy_percent")

(defvar vol_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar ssid "")
(defvar tray_icon '')



(defwidget tray []
  (eventbox
    :cursor "pointer" :onclick "scripts/toggle_tray"
    (label
      :class "tray_icon"
    :text "${tray_icon}")))

(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
    :onhoverlost "eww update vol_reveal=false"
    :cursor "pointer"
    (box :space-evenly false :orientation "h" :spacing "3"
      (button :onclick "pavucontrol &" :class "volume_icon" ``)
      (revealer :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
        (scale :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 151
          :min 0
        :onchange "pamixer --allow-boost --set-limit 150 --set-volume {} && ~/.config/scripts/volume_dunst && eww update volume_percent={}")))))



(defwidget wifi []
  (eventbox
    :onhover "eww update wifi_rev=true"
    :onhoverlost "eww update wifi_rev=false"
    :cursor "pointer"
    :tooltip ssid
    (box :vexpand false :hexpand false :space-evenly false :valign "center"
      (button
        :class "${wifi_connected == "true" ? "wifi_icon" : "wifi_off_icon"}"
      :wrap false :limit-width 12 "${wifi_connected == "true" ? `` : ""}")
      (box   :orientation "v" :space-evenly false :width 55 :valign "center"
        (label :class "wifi_speed_up" :xalign "0"
          :text `↑ ${round(EWW_NET['wlp6s0'].NET_UP / 1024,1) > 1024 ? "${round(EWW_NET['wlp6s0'].NET_UP / 1048576,1)}" : "${round(EWW_NET['wlp6s0'].NET_UP / 1024,1)}"}${round(EWW_NET['wlp6s0'].NET_UP / 1024,1) > 1024 ? "M" : "K"}`)
        (label :class "wifi_speed_down" :xalign "0"
          :text `↓ ${round(EWW_NET['wlp6s0'].NET_DOWN / 1024,1) > 1024 ? "${round(EWW_NET['wlp6s0'].NET_DOWN / 1048576,1)}" : "${round(EWW_NET['wlp6s0'].NET_DOWN / 1024,1)}"}${round(EWW_NET['wlp6s0'].NET_DOWN / 1024,1) > 1024 ? "M" : "K"}`))
    )))

; EWW_NET['wlp6s0'].NET_DOWN
(defwidget powermenu_botton []
  (eventbox :cursor "pointer"
    (box :class "powermenu_botton" :vexpand: false :hexpand: false
      (button :onclick "eww open-many --toggle powermenu" ""))))

(defwidget mem []
  (box :class "system_module mem" :space-evenly false
    (label :class "icon" :text "")
    (box  :orientation "v" :space-evenly false :width 68 :valign "center"
      (label :class "val" :xalign "0"  :text "mem:${round(EWW_RAM.used_mem/1024/1024/1024,1)}" :wrap true)
      (label :class "val" :xalign "0"  :text "disk:${round(EWW_DISK['/'].used/1024/1024/1024,0)}")
    )
  )
)

(defwidget cpu []
  (box :class "system_module cpu" :space-evenly false
    (label :class "icon" :text "")
    (box   :orientation "v" :space-evenly false :width 60 :valign "center" :halign "start"
      (label :class "val" :xalign "0"  :text "CPU:${round(EWW_CPU.avg,0)}%" :wrap true)
      (label :class "val" :xalign "0" :text "GPU:${gpu_busy}%" :wrap true)
    )
  )
)

; (defwidget gpu []
  ;   (box :class "system_module gpu" :space-evenly false
    ;     (label :class "icon" :text "")
    ;     (label :class "val" :text "${gpu_busy}")
    ;     (label :class "unit" :text "%")
  ;   )
; )

(defwidget temps []
  (box :class "system_module temps" :space-evenly false
    (label :class "icon" :text "")
    (box   :orientation "v" :space-evenly false :width 99 :valign "center" :halign "start"
      (label :class "val" :text "CPU:${round(EWW_TEMPS.NCT6798_CPUTIN,1)}°C" :wrap true)
      (label :class "val" :text "GPU:${round(EWW_TEMPS.AMDGPU_MEM,1)}°C" :wrap true)
    )
  )
)

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal"
        :day calendar_day
      :year calendar_year))))


(defwindow calendar
  ; 日历
  :monitor "0"
  :geometry (geometry :x "20px"
    :y "1%"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))
